<<dd_version: 2>>

<head>
<meta charset="UTF-8">
<link rel="stylesheet" type="text/css" href="stmarkdown.css">
</head>

<<dd_do: quietly>>
cscript
local percent 20
local seed 12345

version 16
set linesize 80

* check if Python and Python packages are available
python which numpy
python which matplotlib
python which sklearn
<</dd_do>>

# Using Support Vector Machine to classify car type in Stata's auto dataset

In Stata 16, you can embed and execute Python code from within Stata. 
Stata's new **python** command provides a suite of subcommands allowing you 
to easily call Python from Stata and output Python results within Stata.

We will build a classifier using the Support Vector Machine (SVM) classifier 
within the **scikit-learn** Python package to detect if a car in Stata's 
auto dataset is foreign or domestic built.

Note that you need to install the Matplotlib, sklearn, and NumPy packages in 
your current Python installation to run the following example. 

~~~~
<<dd_do>>
set seed `seed'
sysuse auto, clear
gen train = 0
replace train = 1 if runiform() < `percent'/100
frame put if train==0, into(predict)
keep if train==1
<</dd_do>>
~~~~

## Scatter plot of train data
```stata
<<dd_do>>
python:
import numpy as np
from sfi import Platform
import matplotlib
if Platform.isWindows():
	matplotlib.use('TkAgg')

import matplotlib.pyplot as plt
from sfi import Data
import imageio as io
import os
from mpl_toolkits.mplot3d import Axes3D

X = np.array(Data.get("foreign mpg price weight"))

fig = plt.figure()
ax = Axes3D(fig, elev=-155, azim=105)
ax.scatter(X[:, 1], X[:,2], X[:, 3], c=X[:,0]<0.1, marker='o')
plt.savefig("train_for.png")
end
<</dd_do>>
```

![scatter train data](./train_for.png)

## Scatter plot of production data
```stata
<<dd_do>>
frame change predict
python:
import numpy as np
from sfi import Platform
import matplotlib
if Platform.isWindows():
	matplotlib.use('TkAgg')

import matplotlib.pyplot as plt
from sfi import Data
import imageio as io
import os
from mpl_toolkits.mplot3d import Axes3D

X = np.array(Data.get("foreign mpg turn headroom"))

fig = plt.figure()
ax = Axes3D(fig, elev=-155, azim=105)
ax.scatter(X[:, 1], X[:,2], X[:, 3], c=X[:,0]<0.1, marker='o')
plt.savefig("production_for.png")
end
<</dd_do>>
```

![scatter train data](./production_for.png)

## SVM
```stata
<<dd_do>>
frame change default
pysvm2 foreign mpg turn headroom
frame change predict
pysvm2predict for2
label values for2 origin
tabulate foreign for2, nokey
<</dd_do>>
```


## References 

1. [Convert dynamic Markdown documents to Word or HTML](https://www.stata.com/features/overview/markdown/)
2. [dyndoc manual](https://www.stata.com/manuals/rptdyndoc.pdf)
3. [dynamic tags manual (Stata 16)](https://www.stata.com/manuals/rptdynamictags.pdf#rptDynamictags)
5. [scheme 538](https://danbischof.com/2017/09/05/a-final-stata-gift-538-schemes/)  
4. [markdown reference](https://daringfireball.net/projects/markdown/syntax)
