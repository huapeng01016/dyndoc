<<dd_version: 2>>

<head>
<meta charset="UTF-8">
<link rel="stylesheet" type="text/css" href="stmarkdown.css">
</head>

<<dd_do: quietly>>
cscript
if "`0'" != "" {
	local 0 ", `0'"
	syntax [, percent(interger 20)] 
}

if "`percent'" == "" {
	local percent 20
}

if `percent' < 0 | `percent' > 100 {
	error 198
}
local seed 12345

version 16
set linesize 80

* check if Python and Python packages are available
python which numpy
python which matplotlib
python which sklearn
<</dd_do>>

# Using Support Vector Machine to classify car type in Stata's auto dataset

In Stata 16, you can embed and execute Python code from within Stata. 
Stata's new **python** command provides a suite of subcommands allowing you 
to easily call Python from Stata and output Python results within Stata.

We will build a classifier using the Support Vector Machine (SVM) classifier 
within the **scikit-learn** Python package to detect if a car in Stata's 
auto dataset is foreign or domestic built.

Note that you need to install the Matplotlib, sklearn, and NumPy packages in 
your current Python installation to run the following example. 

~~~~
<<dd_do>>
set seed `seed'
sysuse auto, clear
gen train = 0
replace train = 1 if runiform() < `percent'/100
frame put if train==0, into(predict)
keep if train==1
<</dd_do>>
~~~~

## Scatter plot of train data

We produce a 3d scatter plot of the trainning data. The points are color coded 
for different type (foreign or domestic).

```
python:
import numpy as np
from sfi import Platform
import matplotlib
if Platform.isWindows():
	matplotlib.use('TkAgg')

import matplotlib.pyplot as plt
from sfi import Data
import imageio as io
import os
from mpl_toolkits.mplot3d import Axes3D

X = np.array(Data.get("foreign mpg price weight"))

fig = plt.figure()
ax = Axes3D(fig, elev=-155, azim=105)
ax.scatter(X[:, 1], X[:,2], X[:, 3], c=X[:,0]<0.1, marker='o')
plt.savefig("train_for.png")
plt.close()
end
```

```
<<dd_do: quietly>>
python:
import numpy as np
from sfi import Platform
import matplotlib
if Platform.isWindows():
	matplotlib.use('TkAgg')

import matplotlib.pyplot as plt
from sfi import Data
import imageio as io
import os
from mpl_toolkits.mplot3d import Axes3D

X = np.array(Data.get("foreign mpg price weight"))

fig = plt.figure()
ax = Axes3D(fig, elev=-155, azim=105)
ax.scatter(X[:, 1], X[:,2], X[:, 3], c=X[:,0]<0.1, marker='o')
plt.savefig("train_for.png")
plt.close()
end
<</dd_do>>
```

![scatter train data](./train_for.png)

## Scatter plot of production data

Now We produce the same 3d scatter plot for the prediction data. 

<<dd_do: quietly>>
frame change predict
python:
import numpy as np
from sfi import Platform
import matplotlib
if Platform.isWindows():
	matplotlib.use('TkAgg')

import matplotlib.pyplot as plt
from sfi import Data
import imageio as io
import os
from mpl_toolkits.mplot3d import Axes3D

X = np.array(Data.get("foreign mpg turn headroom"))

fig = plt.figure()
ax = Axes3D(fig, elev=-155, azim=105)
ax.scatter(X[:, 1], X[:,2], X[:, 3], c=X[:,0]<0.1, marker='o')
plt.savefig("production_for.png")
plt.close()
end
<</dd_do>>

![scatter train data](./production_for.png)

## SVM

Now we train the SVM classifier using the trainning data, then predict the type 
using the prediction data.  

```stata
<<dd_do>>
frame change default
pysvm2 foreign mpg turn headroom
frame change predict
pysvm2predict for2
label values for2 origin
tabulate foreign for2, nokey
<</dd_do>>
```

## References 

1. [Python integration in Stata 16](https://www.stata.com/new-in-stata/python-integration/)
2. [pysvm2 and pysvm2predict](https://huapeng01016.github.io/chicago19/#/upgrade)
